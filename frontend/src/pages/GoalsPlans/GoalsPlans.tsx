'use client';

import React, { useState } from 'react';

import styles from './GoalsComponents/goalsplans.module.css';

import GoalSection from './GoalsComponents/GoalSection';

import AddGoalModal from './GoalsComponents/AddGoalModal';

import GoalManagementModal from './GoalsComponents/GoalManagementModal';

import StatusBar from '../../components/StatusBar';

import NavigationBar from '../../components/NavigationBar';

import MenuHeader from '../../components/RealHeader';



const GoalsPlans: React.FC = () => {

Â  // State for goals

Â  const [dailyGoals, setDailyGoals] = useState([

Â  Â  'Read the Book of Mormon for 15 minutes',

Â  Â  'Share a scripture on insta story',

Â  Â  'Meet with the missionaries',

Â  ]);



Â  const [monthlyGoals, setMonthlyGoals] = useState([

Â  Â  'Attend the temple twice',

Â  Â  'Teach with the missionaries twice',

Â  Â  'Reach out to ministering assignment',

Â  ]);



Â  const [yearlyGoals, setYearlyGoals] = useState([

Â  Â  'Receive my endowment',

Â  Â  'Have 2 of my friends accept the gospel',

Â  Â  'Finish reading the Book of Mormon',

Â  ]);



Â  // State for add modal

Â  const [addModalOpen, setAddModalOpen] = useState(false);

Â  const [activeGoalType, setActiveGoalType] = useState<

Â  Â  'daily' | 'monthly' | 'yearly' | null

Â  >(null);



Â  // State for management modal

Â  const [managementModalOpen, setManagementModalOpen] = useState(false);

Â  const [selectedGoal, setSelectedGoal] = useState('');

Â  const [selectedGoalIndex, setSelectedGoalIndex] = useState(-1);



Â  const handleAddGoal = (goalType: 'daily' | 'monthly' | 'yearly') => {

Â  Â  setActiveGoalType(goalType);

Â  Â  setAddModalOpen(true);

Â  };



Â  const handleCloseAddModal = () => {

Â  Â  setAddModalOpen(false);

Â  Â  setActiveGoalType(null);

Â  };



Â  const handleSaveGoal = (newGoal: string) => {

Â  Â  if (activeGoalType === 'daily') {

Â  Â  Â  setDailyGoals([...dailyGoals, newGoal]);

Â  Â  } else if (activeGoalType === 'monthly') {

Â  Â  Â  setMonthlyGoals([...monthlyGoals, newGoal]);

Â  Â  } else if (activeGoalType === 'yearly') {

Â  Â  Â  setYearlyGoals([...yearlyGoals, newGoal]);

Â  Â  }

Â  };



Â  const handleGoalClick = (

Â  Â  goal: string,

Â  Â  index: number,

Â  Â  type: 'daily' | 'monthly' | 'yearly'

Â  ) => {

Â  Â  setSelectedGoal(goal);

Â  Â  setSelectedGoalIndex(index);

Â  Â  setActiveGoalType(type);

Â  Â  setManagementModalOpen(true);

Â  };



Â  const handleCloseManagementModal = () => {

Â  Â  setManagementModalOpen(false);

Â  Â  setSelectedGoal('');

Â  Â  setSelectedGoalIndex(-1);

Â  Â  setActiveGoalType(null);

Â  };



Â  const handleUpdateGoal = (updatedGoal: string) => {

Â  Â  if (activeGoalType === 'daily') {

Â  Â  Â  const updatedGoals = [...dailyGoals];

Â  Â  Â  updatedGoals[selectedGoalIndex] = updatedGoal;

Â  Â  Â  setDailyGoals(updatedGoals);

Â  Â  } else if (activeGoalType === 'monthly') {

Â  Â  Â  const updatedGoals = [...monthlyGoals];

Â  Â  Â  updatedGoals[selectedGoalIndex] = updatedGoal;

Â  Â  Â  setMonthlyGoals(updatedGoals);

Â  Â  } else if (activeGoalType === 'yearly') {

Â  Â  Â  const updatedGoals = [...yearlyGoals];

Â  Â  Â  updatedGoals[selectedGoalIndex] = updatedGoal;

Â  Â  Â  setYearlyGoals(updatedGoals);

Â  Â  }

Â  Â  handleCloseManagementModal();

Â  };



Â  const handleDeleteGoal = () => {

Â  Â  if (activeGoalType === 'daily') {

Â  Â  Â  setDailyGoals(dailyGoals.filter((_, i) => i !== selectedGoalIndex));

Â  Â  } else if (activeGoalType === 'monthly') {

Â  Â  Â  setMonthlyGoals(monthlyGoals.filter((_, i) => i !== selectedGoalIndex));

Â  Â  } else if (activeGoalType === 'yearly') {

Â  Â  Â  setYearlyGoals(yearlyGoals.filter((_, i) => i !== selectedGoalIndex));

Â  Â  }

Â  Â  handleCloseManagementModal();

Â  };



Â  const handleCompleteGoal = () => {

Â  Â  // Here you could implement additional logic for completed goals

Â  Â  // For now, we'll just delete it as a simple implementation

Â  Â  handleDeleteGoal();

Â  };



Â  const handleSetGoals = () => {

Â  Â  console.log('Set goals button clicked');

Â  Â  // Implementation for setting goals

Â  };



Â  const getModalTitle = () => {

Â  Â  switch (activeGoalType) {

Â  Â  Â  case 'daily':

Â  Â  Â  Â  return 'Daily Goal';

Â  Â  Â  case 'monthly':

Â  Â  Â  Â  return 'Monthly Goal';

Â  Â  Â  case 'yearly':

Â  Â  Â  Â  return 'Yearly Goal';

Â  Â  Â  default:

Â  Â  Â  Â  return 'Goal';

Â  Â  }

Â  };



Â  return (

Â  Â  <main className={styles.goalsPlans}>

Â  Â  Â  <div className={styles.goalsPlans2}>

Â  Â  Â  Â  <center><StatusBar /></center>

Â  Â  Â  Â  <center><MenuHeader pageName='Goals & Plans'/></center>

Â  Â  Â  Â  {/* Goal Sections */}

Â  Â  Â  Â  <GoalSection

Â  Â  Â  Â  Â  title="Daily Goals"

Â  Â  Â  Â  Â  goals={dailyGoals}

Â  Â  Â  Â  Â  variant="daily"

Â  Â  Â  Â  Â  onAddClick={() => handleAddGoal('daily')}

Â  Â  Â  Â  Â  onGoalClick={(goal, index) => handleGoalClick(goal, index, 'daily')}

Â  Â  Â  Â  />

Â  Â  Â  Â  <GoalSection

Â  Â  Â  Â  Â  title="Monthly Goals"

Â  Â  Â  Â  Â  goals={monthlyGoals}

Â  Â  Â  Â  Â  variant="monthly"

Â  Â  Â  Â  Â  onAddClick={() => handleAddGoal('monthly')}

Â  Â  Â  Â  Â  onGoalClick={(goal, index) => handleGoalClick(goal, index, 'monthly')}

Â  Â  Â  Â  />

Â  Â  Â  Â  <GoalSection

Â  Â  Â  Â  Â  title="Yearly Goals"

Â  Â  Â  Â  Â  goals={yearlyGoals}

Â  Â  Â  Â  Â  variant="yearly"

Â  Â  Â  Â  Â  onAddClick={() => handleAddGoal('yearly')}

Â  Â  Â  Â  Â  onGoalClick={(goal, index) => handleGoalClick(goal, index, 'yearly')}

Â  Â  Â  Â  />



Â  Â  Â  Â  {/* Action Button */}

Â  Â  Â  Â  <button className={styles.actionButton} onClick={handleSetGoals}>

Â  Â  Â  Â  Â  Completed Goals & Plans

Â  Â  Â  Â  </button>



Â  Â  Â  Â  {/* Learning Resource */}

Â  Â  Â  Â  <button

Â  Â  Â  Â  Â  className={styles.learningResource}

Â  Â  Â  Â  Â  onClick={() =>

Â  Â  Â  Â  Â  Â  window.open(

Â  Â  Â  Â  Â  Â  Â  'https://speeches.byu.edu/talks/j-thomas-fyans/goals/',

Â  Â  Â  Â  Â  Â  Â  '_blank'

Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  Â  }

Â  Â  Â  Â  >

Â  Â  Â  Â  Â  <span className={styles.resourceIcon}>ðŸ“š</span>

Â  Â  Â  Â  Â  <span className={styles.resourceText}>

Â  Â  Â  Â  Â  Â  Learn more about Goal Setting and Planning

Â  Â  Â  Â  Â  </span>

Â  Â  Â  Â  </button>



Â  Â  Â  Â  {/* Add Goal Modal */}

Â  Â  Â  Â  {addModalOpen && (

Â  Â  Â  Â  Â  <AddGoalModal

Â  Â  Â  Â  Â  Â  title={getModalTitle()}

Â  Â  Â  Â  Â  Â  onClose={handleCloseAddModal}

Â  Â  Â  Â  Â  Â  onAddGoal={handleSaveGoal}

Â  Â  Â  Â  Â  />

Â  Â  Â  Â  )}



Â  Â  Â  Â  {/* Goal Management Modal */}

Â  Â  Â  Â  {managementModalOpen && (

Â  Â  Â  Â  Â  <GoalManagementModal

Â  Â  Â  Â  Â  Â  goal={selectedGoal}

Â  Â  Â  Â  Â  Â  onClose={handleCloseManagementModal}

Â  Â  Â  Â  Â  Â  onUpdate={handleUpdateGoal}

Â  Â  Â  Â  Â  Â  onDelete={handleDeleteGoal}

Â  Â  Â  Â  Â  Â  onComplete={handleCompleteGoal}

Â  Â  Â  Â  Â  />

Â  Â  Â  Â  )}

Â  Â  Â  Â  <center><NavigationBar /></center>

Â  Â  Â  </div>

Â  Â  </main>

Â  );

};



export default GoalsPlans;